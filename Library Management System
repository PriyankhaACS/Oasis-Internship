import java.util.*;

class Book {
    private String title;
    private String author;
    private boolean isAvailable;

    public Book(String title, String author) {
        this.title = title;
        this.author = author;
        this.isAvailable = true;
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void setAvailable(boolean available) {
        isAvailable = available;
    }
}

class Library {
    private List<Book> books;
    private Map<String, String> issuedBooks;  

    public Library() {
        this.books = new ArrayList<>();
        this.issuedBooks = new HashMap<>();
    }

    public void addBook(Book book) {
        books.add(book);
    }

    public void displayBooks() {
        System.out.println("Library Books:");
        for (Book book : books) {
            System.out.println("Title: " + book.getTitle() + ", Author: " + book.getAuthor() +
                    ", Available: " + (book.isAvailable() ? "Yes" : "No"));
        }
    }

    public void issueBook(String userId, String bookTitle) {
        for (Book book : books) {
            if (book.getTitle().equalsIgnoreCase(bookTitle) && book.isAvailable()) {
                book.setAvailable(false);
                issuedBooks.put(userId, bookTitle);
                System.out.println("Book issued successfully.");
                return;
            }
        }
        System.out.println("Book not available or invalid title.");
    }

    public void returnBook(String userId) {
        if (issuedBooks.containsKey(userId)) {
            String bookTitle = issuedBooks.get(userId);
            for (Book book : books) {
                if (book.getTitle().equalsIgnoreCase(bookTitle)) {
                    book.setAvailable(true);
                    issuedBooks.remove(userId);
                    System.out.println("Book returned successfully.");
                    return;
                }
            }
        }
        System.out.println("No book issued to the user or invalid user ID.");
    }
}

public class LibraryManagementSystem {
    public static void main(String[] args) {
        Library library = new Library();
        Scanner scanner = new Scanner(System.in);

        // Sample books
        library.addBook(new Book("Java Programming", "John Doe"));
        library.addBook(new Book("Data Structures", "Jane Smith"));

        while (true) {
            System.out.println("\nLibrary Management System");
            System.out.println("1. Login as Admin");
            System.out.println("2. Login as User");
            System.out.println("3. Exit");

            System.out.print("Enter your choice: ");
            int userChoice = scanner.nextInt();
            scanner.nextLine();  // Consume the newline character

            switch (userChoice) {
                case 1:
                    adminMenu(library, scanner);
                    break;
                case 2:
                    userMenu(library, scanner);
                    break;
                case 3:
                    System.out.println("Exiting Library Management System. Goodbye!");
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void adminMenu(Library library, Scanner scanner) {
        while (true) {
            System.out.println("\nAdmin Menu");
            System.out.println("1. Add Book");
            System.out.println("2. Display Books");
            System.out.println("3. Logout");

            System.out.print("Enter your choice: ");
            int adminChoice = scanner.nextInt();
            scanner.nextLine();  // Consume the newline character

            switch (adminChoice) {
                case 1:
                    System.out.print("Enter the title of the book: ");
                    String title = scanner.nextLine();
                    System.out.print("Enter the author of the book: ");
                    String author = scanner.nextLine();
                    library.addBook(new Book(title, author));
                    System.out.println("Book added successfully.");
                    break;
                case 2:
                    library.displayBooks();
                    break;
                case 3:
                    System.out.println("Logging out from Admin account.");
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void userMenu(Library library, Scanner scanner) {
        while (true) {
            System.out.println("\nUser Menu");
            System.out.println("1. Display Books");
            System.out.println("2. Issue Book");
            System.out.println("3. Return Book");
            System.out.println("4. Logout");

            System.out.print("Enter your choice: ");
            int userChoice = scanner.nextInt();
            scanner.nextLine();  // Consume the newline character

            switch (userChoice) {
                case 1:
                    library.displayBooks();
                    break;
                case 2:
                    System.out.print("Enter your user ID: ");
                    String userId = scanner.nextLine();
                    System.out.print("Enter the title of the book you want to issue: ");
                    String issueBookTitle = scanner.nextLine();
                    library.issueBook(userId, issueBookTitle);
                    break;
                case 3:
                    System.out.print("Enter your user ID: ");
                    String returnUserId = scanner.nextLine();
                    library.returnBook(returnUserId);
                    break;
                case 4:
                    System.out.println("Logging out from User account.");
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}
